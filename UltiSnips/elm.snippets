snippet module "define a module" b
module ${1:`substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')`} exposing (${1}${2})

$0
endsnippet

snippet imp "simple import" b
import ${0:Html}
endsnippet

snippet impa "qualified import" b
import ${1:Json.Encode} as ${0:`!p snip.rv = t[1].split(".")[-1]`}
endsnippet

snippet impe "import with exposing" b
import ${1:Html} exposing (${1}$0)
endsnippet

snippet impae "qualified import with exposing" b
import ${1:Json.Encode} as ${2:`!p snip.rv = t[1].split(".")[-1]`} exposing (${0:Value})
endsnippet

snippet fn "function definition" b
${1:name} : ${2:a} -> ${3:a}
$1 ${4:argument} =
	$0
endsnippet

snippet - "switch case"
${1} ->
	$0
endsnippet

snippet let
let
	${1:var} =
		${2:definition}
in
	${0}
endsnippet

snippet \l "lambda"
(\\${1:x} -> ${2})$0
endsnippet

snippet h "usual html structure"
${1:type} [ ${2:attributes} ] [ ${3:content} ]
endsnippet

snippet req "http request"
Http.request
	{ url = ${1:url}
	, expect = Http.expectJson ${2:Msg} ${3:decoder}
	, method = "${4:GET}"
	, body = Http.${5:emptyBody}
	, timeout = ${6:Nothing}
	, tracker = ${7:Nothing}
	, headers = [${8}]
	}$0
endsnippet
