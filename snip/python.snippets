global !p
class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		name_and_type = arg.split('=')[0].split(':')
		self.name = name_and_type[0].strip()
		self.type = name_and_type[1].strip() if len(name_and_type) == 2 else None
	def __str__(self):
		return self.name
	def __unicode__(self):
		return self.name
	def is_kwarg(self):
		return '=' in self.arg
	def is_vararg(self):
		return '*' in self.name

def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']
	return args

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def my_write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format('"""')
		return

	snip.rv += '\n' + snip.mkline('', indent='')

	for arg in args:
		snip += ":%s: TODO" % arg

def my_write_function_docstring(t, snip):
	"""
	Writes a function docstring.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1

	args = get_args(t[2])
	if args:
		my_write_docstring_args(args, snip)

	snip += ":returns: TODO"
	snip += '"""'
endglobal

snippet #! "header preamble" b
#!/usr/bin/env python3
$0
endsnippet
snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet
snippet main "main" b
if __name__ == "__main__":
	${1:${VISUAL:main()}}
endsnippet
snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet
snippet class "class definition" b
class ${1:MyClass}(${2:object}):
	"""${3:TODO: to be defined.}"""

	def __init__(${4:self}):
		"""${5:TODO: to be defined.}"""
		$0
endsnippet
snippet def "function definition" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${4:""""${5:TODO: Docstring for $1.}`!p my_write_function_docstring(t, snip) `}
	${6:${VISUAL:pass}}
endsnippet
