extends c

# classes
snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet
snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet
snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet
snippet mfun "member function definition" b
${4:void} ${1:`!p snip.rv = snip.basename or "class"`}::${2:function}(${3}) {
	${0}
}
endsnippet
snippet Con "constructor definition" b
${1:`!p snip.rv = snip.basename or "class"`}::$1(${2}) {${3}
}
${0}
endsnippet
snippet Des "destructor definition" b
${1:`!p snip.rv = snip.basename or "class"`}::~$1(${2}) {${3}
}
${0}
endsnippet

# i/o
snippet cout "std::cout"
std::cout << ${1} << std::endl;${0}
endsnippet
snippet cin "std::cin"
std::cin >> ${1};${0}
endsnippet
snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet
