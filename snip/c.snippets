# macros, include guards, etc
snippet once "Include header once only guard" b
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
    snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */

endsnippet
snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet
snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet
snippet inc "#include <...>"
#include <${1:stdio}.h>
endsnippet
snippet Inc "#include local"
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet
snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet
snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet
snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet
snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

# getopt boilerplate
snippet getopt "getopt foo bar" b
${1:char c;}

while ((c = getopt (argc, argv, "${2:h}")) != -1)
	switch(c)
	{
		case '${3:h}':
			${4:usage();}
			exit(0);
		case '?':
			${5:usage();}
			exit(1);
		default:
			exit(1);
	}
${0}
endsnippet
snippet opt "another getopt option"
case '${1:option}':
	${2:/*TODO: handle the option*/}
	${3:break;}
endsnippet
